<section class="border-white/20  border-b">
  <div class="mx-auto border-white/20  border-x max-w-7xl">
    <div id="cta-container" class="bg-transparent duration-200">
      
      <!-- State: Join Button -->
      <div id="cta-join-wrapper" class="hidden">
        <a href="#" id="join-queue-btn" class="text-white text-center items-center w-full bg-orange duration-200 focus:outline-disc focus:ring-0 font-display font-medium inline-flex justify-center lg:py-12 lg:text-6xl px-4 py-6 text-3xl">Pide el último</a>
      </div>

      <!-- State: Loading -->
      <div id="cta-loading-wrapper"> <!-- Show this by default -->
          <div class="text-white text-center items-center w-full bg-gray-800 duration-200 font-display font-medium inline-flex justify-center lg:py-12 lg:text-6xl px-4 py-6 text-3xl loader-dots">
            <span>Cargando</span>
            <div class="h-3 w-3 lg:h-5 lg:w-5 bg-white rounded-full ml-4 lg:ml-6"></div>
            <div class="h-3 w-3 lg:h-5 lg:w-5 bg-white rounded-full ml-2 lg:ml-3"></div>
            <div class="h-3 w-3 lg:h-5 lg:w-5 bg-white rounded-full ml-2 lg:ml-3"></div>
          </div>
      </div>

      <!-- State: Position in Queue -->
      <div id="cta-position-wrapper" class="hidden">
        <div id="position-display" class="text-white text-center items-center w-full bg-green-600 duration-200 font-display font-medium inline-flex justify-center lg:py-12 lg:text-6xl px-4 py-6 text-3xl"></div>
      </div>

      <!-- State: Error -->
      <div id="cta-error-wrapper" class="hidden">
          <div id="error-display" class="text-white text-center items-center w-full bg-red-600 duration-200 font-display font-medium inline-flex justify-center lg:py-12 lg:text-6xl px-4 py-6 text-3xl"></div>
      </div>

    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const ctaContainer = document.getElementById('cta-container');
    const joinWrapper = document.getElementById('cta-join-wrapper');
    const loadingWrapper = document.getElementById('cta-loading-wrapper');
    const positionWrapper = document.getElementById('cta-position-wrapper');
    const errorWrapper = document.getElementById('cta-error-wrapper');
    
    const positionDisplay = document.getElementById('position-display');
    const errorDisplay = document.getElementById('error-display');
    const joinButton = document.getElementById('join-queue-btn');

    const storageKey = 'virtualQueueUserId';
    let retryCount = 0;
    const maxRetries = 5;

    const setState = (state) => {
        // Reset all
        joinWrapper.classList.add('hidden');
        loadingWrapper.classList.add('hidden');
        positionWrapper.classList.add('hidden');
        errorWrapper.classList.add('hidden');
        ctaContainer.classList.remove('group', 'hover:bg-orange', 'cursor-cookie');

        if (state === 'loading') {
            loadingWrapper.classList.remove('hidden');
        } else if (state === 'button') {
            joinWrapper.classList.remove('hidden');
            ctaContainer.classList.add('group', 'hover:bg-orange', 'cursor-cookie');
        } else if (state === 'position') {
            positionWrapper.classList.remove('hidden');
        } else if (state === 'error') {
            errorWrapper.classList.remove('hidden');
        }
    }

    const renderPosition = (position, total) => {
      retryCount = 0;
      positionDisplay.textContent = `#${position} de ${total}`;
      setState('position');
    };
    
    const renderError = (message) => {
      errorDisplay.textContent = message;
      setState('error');
    }

    const renderButton = () => {
      setState('button');
    }
    
    const renderLoading = () => {
        setState('loading');
    }

    const handleJoinQueue = async (e) => {
      e.preventDefault();
      retryCount = 0;
      renderLoading();
      try {
        const response = await fetch('/api/queue', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: localStorage.getItem(storageKey) })
        });

        if (!response.ok) throw new Error('Failed to join queue');

        const { userId } = await response.json();
        localStorage.setItem(storageKey, userId);
        checkQueueStatus(); // Re-check status to show position
      } catch (error) {
        console.error(error);
        renderError('Error al unirse a la fila.');
      }
    };
    
    joinButton.addEventListener('click', handleJoinQueue);

    const checkQueueStatus = async () => {
      const userId = localStorage.getItem(storageKey);
      if (!userId) {
        renderButton();
        return;
      }
      
      renderLoading();

      try {
        const response = await fetch(`/api/queue?userId=${userId}`);
        
        if (response.status === 404) {
             // User is in localStorage but not in DB, maybe DB was cleared
            localStorage.removeItem(storageKey);
            renderButton();
            return;
        }

        if (!response.ok) {
            throw new Error('Failed to get queue status');
        }

        const { position, total } = await response.json();
        renderPosition(position, total);

      } catch (error) {
        console.error(error);
        retryCount++;
        if (retryCount < maxRetries) {
          renderError(`Error... Reintentando (${retryCount}/${maxRetries})`);
          setTimeout(checkQueueStatus, 3000);
        } else {
          renderError('Error de red. Inténtalo más tarde.');
        }
      }
    };

    checkQueueStatus();
  });
</script>