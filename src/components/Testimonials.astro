---
---
<section class="border-b border-white/20">
    <div class="mx-auto max-w-7xl border-x border-white/20">
        <div class="p-8">
            <h2 class="text-3xl font-display uppercase font-bold text-center text-white">Lo que dice la gente en la cola</h2>
        </div>
    </div>
    <div class="mx-auto max-w-7xl border-x border-t border-white/20 gradient-grid">
        <div class="p-8">
            <div id="testimonial-form-container" class="mb-16">
                <form id="testimonial-form" class="space-y-6 max-w-2xl mx-auto">
                    <div>
                        <label for="name" class="block font-display uppercase text-white mb-2">Nombre</label>
                        <input type="text" id="name" name="name" required minlength="1" maxlength="30" class="mt-1 block w-full bg-gray-900/50 border-gray-600 rounded-md shadow-sm text-white focus:ring-amber-500 focus:border-amber-500 py-3 px-4">
                    </div>
                    <div>
                        <label for="occupation" class="block font-display uppercase text-white mb-2">Ocupación </label>
                        <input type="text" id="occupation" name="occupation" required minlength="1" maxlength="30" class="mt-1 block w-full bg-gray-900/50 border-gray-600 rounded-md shadow-sm text-white focus:ring-amber-500 focus:border-amber-500 py-3 px-4">
                    </div>
                    <div>
                        <label for="message" class="block font-display uppercase text-white mb-2">Tu mensaje</label>
                        <textarea id="message" name="message" rows="6" required minlength="1" maxlength="300" class="mt-1 block w-full bg-gray-900/50 border-gray-600 rounded-md shadow-sm text-white focus:ring-amber-500 focus:border-amber-500"></textarea>
                    </div>
                    <button type="submit" class="w-full bg-amber-600 hover:bg-amber-700 text-white font-bold py-3 px-4 rounded-lg transition-colors cursor-pointer">
                        Enviar Mensaje
                    </button>
                    <p id="form-message" class="text-center text-sm min-h-[20px]"></p>
                </form>
            </div>

            <div id="testimonials-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-x-8 gap-y-12">
                <p class="initial-loading-message text-center text-gray-400 col-span-full">Cargando testimonios...</p>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const testimonialsContainer = document.getElementById('testimonials-container') as HTMLElement;
        const formContainer = document.getElementById('testimonial-form-container') as HTMLElement;
        const form = document.getElementById('testimonial-form') as HTMLFormElement;
        const formMessage = document.getElementById('form-message') as HTMLParagraphElement;
        let currentUserId = localStorage.getItem('virtualQueueUserId');

        // Escuchar el evento de registro de usuario para actualizar el ID dinámicamente.
        document.addEventListener('userRegistered', (e: CustomEvent) => {
            if (e.detail.userId) {
                currentUserId = e.detail.userId;
              
                checkAndToggleForm();
            }
        });

        const createTestimonialCardHTML = (testimonial) => {
            const isAuthor = testimonial.id === currentUserId;
            const deleteButtonHTML = isAuthor
                ? `<button data-id="${testimonial.id}" class="delete-button absolute top-4 right-4 bg-gray-900/70 text-red-400 hover:text-white hover:bg-red-500/80 font-bold py-1 px-2 rounded-md transition-all duration-200">Borrar</button>`
                : '';

            return `
                <div id="testimonial-${testimonial.id}" class="testimonial-card bg-black p-6 rounded-lg relative">
                    <div class="pr-12">
                        <p class="mb-4 text-sm break-words bg-gradient-to-r from-amber-400 via-amber-500 to-yellow-500 bg-clip-text text-transparent">“${testimonial.message}”</p>
                        <h3 class="font-bold text-white">${testimonial.name}</h3>
                        <p class="text-gray-400 text-sm">${testimonial.occupation}</p>
                    </div>
                    ${deleteButtonHTML}
                </div>
            `;
        };

        const renderTestimonials = (testimonials) => {
            if (testimonials.length === 0) {
                testimonialsContainer.innerHTML = '<p class="text-center text-gray-400 col-span-full">Nadie ha dejado un mensaje todavía. ¡Sé el primero!</p>';
            } else {
                testimonialsContainer.innerHTML = testimonials.map(createTestimonialCardHTML).join('');
            }
        };
        
        const checkAndToggleForm = () => {
            const hasSentMessage = localStorage.getItem('virtualQueueHasSendedMessage') === 'true';
            formContainer.style.display = hasSentMessage ? 'none' : 'block';
        };

        const fetchAndRenderTestimonials = async () => {
            try {
                const response = await fetch('/api/testimonials');
                const testimonials = await response.json();
                renderTestimonials(testimonials);
                
                const userHasPosted = testimonials.some(t => t.id === currentUserId);
                localStorage.setItem('virtualQueueHasSendedMessage', userHasPosted.toString());
                checkAndToggleForm();

            } catch (error) {
                console.error('Failed to fetch testimonials:', error);
                testimonialsContainer.innerHTML = '<p class="text-center text-red-400 col-span-full">No se pudieron cargar los testimonios.</p>';
            }
        };

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            formMessage.textContent = '';
            
            const name = (form.elements.namedItem('name') as HTMLInputElement).value;
            const occupation = (form.elements.namedItem('occupation') as HTMLInputElement).value;
            const message = (form.elements.namedItem('message') as HTMLTextAreaElement).value;

            if (name.length < 1 || name.length > 30) {
                formMessage.textContent = 'El nombre debe tener entre 1 y 30 caracteres.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                return;
            }

            if (occupation.length < 1 || occupation.length > 30) {
                formMessage.textContent = 'La ocupación debe tener entre 1 y 30 caracteres.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                return;
            }

            if (message.length < 1 || message.length > 300) {
                formMessage.textContent = 'El mensaje debe tener entre 1 y 300 caracteres.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                return;
            }

            if (!currentUserId) {
                formMessage.textContent = 'Debes unirte a la cola primero para dejar un mensaje.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                return;
            }

            const formData = new FormData(form);
            const data = {
                userId: currentUserId,
                name: formData.get('name') as string,
                occupation: formData.get('occupation') as string,
                message: formData.get('message') as string,
            };

            try {
                const response = await fetch('/api/testimonials', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    const newTestimonial = await response.json();
                    const cardHTML = createTestimonialCardHTML(newTestimonial);
                    
                    const placeholder = testimonialsContainer.querySelector('p.col-span-full');
                    if (placeholder) placeholder.parentElement.innerHTML = '';

                    testimonialsContainer.insertAdjacentHTML('afterbegin', cardHTML);
                    
                    localStorage.setItem('virtualQueueHasSendedMessage', 'true');
                    checkAndToggleForm();
                    form.reset();
                } else {
                    const error = await response.json();
                    formMessage.textContent = error.error || 'Hubo un error al enviar tu mensaje.';
                    formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                }
            } catch (error) {
                formMessage.textContent = 'Error de red. Inténtalo de nuevo.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
            }
        });

        testimonialsContainer.addEventListener('click', async (e) => {
            const target = e.target as HTMLElement;
            if (target.matches('.delete-button')) {
                const testimonialId = target.dataset.id;
                if (!testimonialId || !confirm('¿Estás seguro de que quieres borrar tu mensaje?')) return;

                try {
                    const response = await fetch('/api/testimonials', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId: testimonialId }),
                    });

                    if (response.ok) {
                        const cardToRemove = document.getElementById(`testimonial-${testimonialId}`);
                        if (cardToRemove) {
                            cardToRemove.style.opacity = '0';
                            cardToRemove.style.transform = 'scale(0.9)';
                            setTimeout(() => {
                                cardToRemove.remove();
                                if (testimonialsContainer.children.length === 0) {
                                     testimonialsContainer.innerHTML = '<p class="text-center text-gray-400 col-span-full">Nadie ha dejado un mensaje todavía. ¡Sé el primero!</p>';
                                }
                            }, 300);
                        }
                        localStorage.setItem('virtualQueueHasSendedMessage', 'false');
                        checkAndToggleForm();
                    } else {
                        alert('No se pudo borrar el mensaje.');
                    }
                } catch (error) {
                    alert('Error de red al intentar borrar.');
                }
            }
        });
        
        // Carga inicial
        fetchAndRenderTestimonials();
    });
</script> 