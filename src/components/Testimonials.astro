---
import Chat from "./landing/Chat.astro";
import type { Testimonial } from "../types/testimonials";
import { db } from '@/lib/firebase-admin';
import { redis } from '@/lib/redis';

let testimonials: Testimonial[] = [];
const cacheKey = 'cache:testimonials';

try {
    // Intentar obtener los datos del caché
    console.log('Trying to fetch testimonials from cache...');
    const cachedTestimonials = await redis.get(cacheKey);

    if (cachedTestimonials) {
        console.log('CACHE HIT! Loading testimonials from Redis.');
        testimonials = cachedTestimonials as Testimonial[];
    } else {
        console.log('CACHE MISS! Loading testimonials from Firestore...');
        const testimonialsRef = db.collection('testimonials');
        const snapshot = await testimonialsRef
            .orderBy('createdAt', 'desc')
            .limit(50)
            .get();

        if (!snapshot.empty) {
            testimonials = snapshot.docs.map(doc => {
                const data = doc.data();
                const createdAt = data.createdAt.toDate ? data.createdAt.toDate().toISOString() : data.createdAt;
                return {
                    id: doc.id,
                    name: data.name,
                    occupation: data.occupation,
                    message: data.message,
                    createdAt: createdAt,
                } as Testimonial;
            });

            console.log('Saving fresh testimonials to cache (TTL: 120s)...');
            await redis.set(cacheKey, testimonials, { ex: 120 });
        }
    }
} catch (error) {
    console.error('Error loading testimonials:', error);
    testimonials = [];
}

---
<section class="border-b border-white/20">
    <div class="mx-auto max-w-7xl border-x border-white/20">
        <div class="p-8">
            <h2 class="text-3xl font-display uppercase font-bold text-center text-white">Lo que dice la gente en la cola</h2>
        </div>
    </div>
    <div class="mx-auto max-w-7xl border-x border-t border-white/20 gradient-grid py-8 px-4">
        <div class="relative">
            <Chat testimonials={testimonials} />
        </div>
        <div class="p-8">
            <div id="testimonial-form-container" class="mb-16">
                <form id="testimonial-form" class="space-y-6 max-w-2xl mx-auto">
                    <div>
                        <h3 class="text-xl font-display uppercase font-bold text-center text-white">Envía tu mensaje</h3>
                    </div>
                    <div>
                        <label for="name" class="block font-display uppercase text-white mb-2 text-sm md:text-base">Nombre</label>
                        <input type="text" id="name" name="name" required minlength="1" maxlength="20" class="mt-1 block w-full bg-gray-900/50 border-gray-600 rounded-md shadow-sm text-white focus:ring-amber-500 focus:border-amber-500 py-3 px-4">
                    </div>
                    <div>
                        <label for="occupation" class="block font-display uppercase text-white mb-2 text-sm md:text-base">Ocupación </label>
                        <input type="text" id="occupation" name="occupation" required minlength="1" maxlength="20" class="mt-1 block w-full bg-gray-900/50 border-gray-600 rounded-md shadow-sm text-white focus:ring-amber-500 focus:border-amber-500 py-3 px-4">
                    </div>
                    <div>
                        <label for="message" class="block font-display uppercase text-white mb-2 text-sm md:text-base">Tu mensaje</label>
                        <textarea id="message" name="message" rows="6" required minlength="1" maxlength="300" class="mt-1 block w-full bg-gray-900/50 border-gray-600 rounded-md shadow-sm text-white focus:ring-amber-500 focus:border-amber-500"></textarea>
                    </div>
                    <button type="submit" class="w-full bg-amber-600 hover:bg-amber-700 text-white font-bold py-3 px-4 rounded-lg transition-colors cursor-pointer">
                        Enviar Mensaje
                    </button>
                    <p id="form-message" class="text-center text-sm min-h-[20px]"></p>
                </form>
            </div>
            

        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('testimonial-form') as HTMLFormElement;
        const formMessage = document.getElementById('form-message') as HTMLParagraphElement;
        let currentUserId = localStorage.getItem('virtualQueueUserId');


        // Escuchar evento para actualizar UI cuando el usuario se registra
        document.addEventListener('userRegistered', (e: CustomEvent) => {
            if (e.detail.userId) {
                currentUserId = e.detail.userId;
                document.dispatchEvent(new CustomEvent('userChanged', { detail: { userId: currentUserId } }));
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            formMessage.textContent = '';
            
            const name = (form.elements.namedItem('name') as HTMLInputElement).value;
            const occupation = (form.elements.namedItem('occupation') as HTMLInputElement).value;
            const message = (form.elements.namedItem('message') as HTMLTextAreaElement).value;

            if (name.length < 1 || name.length > 30) {
                formMessage.textContent = 'El nombre debe tener entre 1 y 30 caracteres.';
                formMessage.className = 'text-center text-sm min-h-[30px] text-red-400';
                return;
            }

            if (occupation.length < 1 || occupation.length > 30) {
                formMessage.textContent = 'La ocupación debe tener entre 1 y 30 caracteres.';
                formMessage.className = 'text-center text-sm min-h-[30px] text-red-400';
                return;
            }

            if (message.length < 1 || message.length > 300) {
                formMessage.textContent = 'El mensaje debe tener entre 1 y 300 caracteres.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                return;
            }

            if (!currentUserId) {
                formMessage.textContent = 'Debes unirte a la cola primero para dejar un mensaje.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                return;
            }

            const formData = new FormData(form);
            const data = {
                userId: currentUserId,
                name: formData.get('name') as string,
                occupation: formData.get('occupation') as string,
                message: formData.get('message') as string,
            };

            try {
                const response = await fetch('/api/testimonials', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    const newTestimonial = await response.json();
                    
                    // Avisar al carrusel que debe añadir un nuevo testimonio
                    document.dispatchEvent(new CustomEvent('testimonialAdded', { detail: newTestimonial }));
                    
                    form.reset();
                } else {
                    const error = await response.json();
                    formMessage.textContent = error.error || 'Hubo un error al enviar tu mensaje.';
                    formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
                }
            } catch (error) {
                formMessage.textContent = 'Error de red. Inténtalo de nuevo.';
                formMessage.className = 'text-center text-sm min-h-[20px] text-red-400';
            }
        });
    });
</script> 